source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("ALL")
library(Biostrings)
biocLite()
source("Biostrings")
library("Biostrings")
library("Biostring")
library(Biostring")
""
library(Biostring)
library(Biostrings)
biocLite(Biostrings)
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite()
library(Biostrings)
library("Biostrings")
biocLite(Biostrings)
biocLite("Biostrings")
library(Biostrings)
dnaSeq = DNAString("TTCAGATCTAGTTCGTGTGTGACTGATGATCTGTCACACGTTTTTCTGATCTTCTGACTAGTCGAT")
dnaSeq[1:10]
version
substr(dnaSeq,1,10)
length(dnaSeq) #Establece el largo de la secuencia
reverseComplement(dnaSeq) #Genera una cadena complementaria reversa
alphabetFrequency(dnaSeq) #Indica la cardinalidad de cada caracter
compareStrings(dnaSeq,dnaSeq)
dnaSeq2 = DNAString("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
compareStrings(dnaSeq,dnaSeq2)
dnaSeq = readDNAStringSet("D:\Proyectos\Bioinformatica\primates_14.fasta")
dnaSeq = readDNAStringSet("D:\\Proyectos\\Bioinformatica\\primates_14.fasta")
names(dnaSeq) #Conocer el nombre de las especies
length(dnaSeq) #Saber cuantas especies son
reverseComplement(dnaSeq[1]) #Complemento
alphabetFrequency(dnaSeq) #Contador de caracteres
dnaSeq = DNAString("TTCAGATCTAGTTCGTGTGTGACTGATGATCTGTCACACGTTTTTCTGATCTTCTGACTAGTCGAT")
-v
-version
--v
--version
R.Version()
library(stringr)
smith <- function (s1,s2)
{
matriz = matrix(nrow = nchar(s1) + 1 , ncol = nchar(s2)+1)
s1 <- paste("",s1)
s2 <- paste("",s2)
rownames(matriz) <- c(unlist(strsplit(s1, "")))
colnames(matriz) <- c(unlist(strsplit(s2, "")))
matriz <- inicializar_matriz(matriz)
matriz <- fill_table(matriz)
which(matriz == max(matriz), arr.ind = TRUE)
}
fill_table <- function(matriz)
{
match <- 1
gap <- -2
mmatch <- -1
puntaje <- 0
for(i in 2:nrow(matriz))
{
for(j in 2:ncol(matriz))
{
if(rownames(matriz)[i]==rownames(matriz)[j])
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+match)
}
else
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+mmatch)
}
matriz[i,j] <- puntaje
}
}
return(matriz)
}
inicializar_matriz <- function (matriz)
{
for(i in 1:nrow(matriz))
{
matriz[i,1] <- 0
}
for(j in 1:ncol(matriz))
{
matriz[1,j] <- 0
}
return(matriz)
}
highScore <- function (v1,v2,v3)
{
return(pmax(0,v1,v2,v3))
}
smith <- function (s1,s2)
{
matriz = matrix(nrow = nchar(s1) + 1 , ncol = nchar(s2)+1)
s1 <- paste("",s1)
s2 <- paste("",s2)
rownames(matriz) <- c(unlist(strsplit(s1, "")))
colnames(matriz) <- c(unlist(strsplit(s2, "")))
matriz <- inicializar_matriz(matriz)
matriz <- fill_table(matriz)
print(which(matriz == max(matriz), arr.ind = TRUE))
}
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA','GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
smith <- function (s1,s2)
{
matriz = matrix(nrow = nchar(s1) + 1 , ncol = nchar(s2)+1)
s1 <- paste("",s1)
s2 <- paste("",s2)
rownames(matriz) <- c(unlist(strsplit(s1, "")))
colnames(matriz) <- c(unlist(strsplit(s2, "")))
matriz <- inicializar_matriz(matriz)
matriz <- fill_table(matriz)
print(pmax(matriz))
}
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA','GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA','G')
smith <- function (s1,s2)
{
matriz = matrix(nrow = nchar(s1) + 1 , ncol = nchar(s2)+1)
s1 <- paste("",s1)
s2 <- paste("",s2)
rownames(matriz) <- c(unlist(strsplit(s1, "")))
colnames(matriz) <- c(unlist(strsplit(s2, "")))
matriz <- inicializar_matriz(matriz)
matriz <- fill_table(matriz)
print(matriz)
}
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA',
'GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
fill_table <- function(matriz)
{
match <- 1
gap <- -2
mmatch <- -1
puntaje <- 0
for(i in 2:nrow(matriz))
{
for(j in 2:ncol(matriz))
{
if(rownames(matriz)[i]==colnames(matriz)[j])
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+match)
}
else
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+mmatch)
}
matriz[i,j] <- puntaje
}
}
return(matriz)
}
smith <- function (s1,s2)
{
matriz = matrix(nrow = nchar(s1) + 1 , ncol = nchar(s2)+1)
s1 <- paste("",s1)
s2 <- paste("",s2)
rownames(matriz) <- c(unlist(strsplit(s1, "")))
colnames(matriz) <- c(unlist(strsplit(s2, "")))
matriz <- inicializar_matriz(matriz)
matriz <- fill_table(matriz)
print(matriz)
}
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA',
'GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA',
'GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
library(Biostrings)
setwd("C:\\Users\\Kari\\Documents\\GitHub\\Bioinformatica\\Evaluacion_01\\Scripts")
seq1<-DNAString("GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA")
seq2<-DNAString("GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA")
mat = nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
localAlign = pairwiseAlignment(seq1, seq2, type="local", substitutionMatrix = mat,gapOpening=-2, gapExtension = -2)
print(localAlign)
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA',
'GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
mat = nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
localAlign = pairwiseAlignment(seq1, seq2, type="local", substitutionMatrix = mat,gapOpening=-2, gapExtension = -2)
print(localAlign)
mat = nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
localAlign = pairwiseAlignment(seq1, seq2, type="local", substitutionMatrix = mat,gapOpening=0, gapExtension = 0)
print(localAlign)
fill_table <- function(matriz)
{
match <- 1
gap <- 0
mmatch <- -1
puntaje <- 0
for(i in 2:nrow(matriz))
{
for(j in 2:ncol(matriz))
{
if(rownames(matriz)[i]==colnames(matriz)[j])
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+match)
}
else
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+mmatch)
}
matriz[i,j] <- puntaje
}
}
return(matriz)
}
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA',
'GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
print(localAlign)
mat = nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
localAlign = pairwiseAlignment(seq1, seq2, type="local", substitutionMatrix = mat,gapOpening=-2, gapExtension = -2)
print(localAlign)
fill_table <- function(matriz)
{
match <- 1
gap <- -2
mmatch <- -1
puntaje <- 0
for(i in 2:nrow(matriz))
{
for(j in 2:ncol(matriz))
{
if(rownames(matriz)[i]==colnames(matriz)[j])
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+match)
}
else
{
puntaje <- highScore(matriz[i-1,j]+gap,matriz[i,j-1]+gap,matriz[i-1,j-1]+mmatch)
}
matriz[i,j] <- puntaje
}
}
return(matriz)
}
smith('GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA',
'GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA')
print(localAlign)
seq1<-DNAString("GAATTCCTACTACGAAGAATTCCTACTACGAAACTACGAAAATTCCTACTACGA")
seq2<-DNAString("GAATTCCTACTACGGAATTCCCCTCCCATAATTCCTACTACGA")
mat = nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
localAlign = pairwiseAlignment(seq1, seq2, type="local", substitutionMatrix = mat,gapOpening=-2, gapExtension = -2)
print(localAlign)
