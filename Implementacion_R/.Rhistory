source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
name
distance_p1
distance_p2
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
names
name
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
name
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
mmatrix=data.frame(clases=name,distances=c(distance_p1,distance_p2))
matrix=data.frame(clases=name,distances=c(distance_p1,distance_p2))
matriz
matrix
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
name
matrix
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
distance_p1
names
name
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
name
distance
c(distance_p1,distance_p2)
distance_p1
distance_p2
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
matrix
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
matrix
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
matrix
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
matrix
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
matrix
box_plot=qplot(factor(class),distances, data = matrix, geom = "boxplot",ylab = "Robinson-Foulds distance",xlab="",main=paste("(pvalue: ",res$p.value,")",sep="")) +
theme( title = element_text(size=14),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12))
box_plot=qplot(factor(class),distances, data = matrix, geom = "boxplot",ylab = "Robinson-Foulds distance",xlab="",main=paste("(pvalue: ",1,")",sep="")) +
theme( title = element_text(size=14),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12))
plot(box_plot)
matrix
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
a1 <- aov(matrix$distance ~ matrix$class)
posthoc <- TukeyHSD(x=a1, 'matrix$class', conf.level=0.95)
print(posthoc)
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
Population=rTBRm(tree1$tree)
Population=rTBRm(tree1)
Population=rTBRm(tree1$tree)
tree[[1]]$tree
tree1[[1]]$tree
tree1$tree
tree1[[1]]
rTBRm(tree1)
tree1[[1]]=tree1
Population=rTBRm(tree1)
source('~/.active-rstudio-document', encoding = 'UTF-8')
Population=rTBRm(tree1)
tree1
tree1
source('~/.active-rstudio-document', encoding = 'UTF-8')
tree1
tree1$tree
tree1[[1]]
subtrees(tree1[[1]]$tree)
subtrees(tree1$tree)
source('~/.active-rstudio-document', encoding = 'UTF-8')
Population=rTBRm(tree1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
remove_tree=subtrees[r][[1]]
tree2=drop.tip(tree1$tree,remove_tree$tip.label)
tree2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
tree1
tree1$tree
source('~/.active-rstudio-document')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/exp_paper/Crossover/crossover2.R')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document')
remove_tree
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
tree1$tree
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
branch=tree1$tree$edge.length[pos]*runif(1,0.1,1)
branch
branch=tree1$tree$edge.length
branch
pos
pos=which(tree1$tree$edge[,2]==r1)
pos
r1=sample(1:length(tree1$tip.label),1)
r1
r1
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document')
subtrees=subtrees(tree1$tree)
r=sample(2:length(subtrees),1)
remove_tree=subtrees[r][[1]]
tree2=drop.tip(tree1$tree,remove_tree$tip.label)
r1=sample(1:length(tree1$tree$tip.label),1)
pos=which(tree1$tree$edge[,2]==r1)
tree1$tree$edge.length[which(tree1$tree$edge.length<=0)]=0.00001
branch=tree1$tree$edge.length[pos]*runif(1,0.1,1)
branch
output=bind.tree(tree1$tree, remove_tree,r1,branch)
output=bind.tree(tree1$tree, remove_tree,r1,branch)
remove_tree
r1
branch
tree1$tree
output=bind.tree(tree1$tree, remove_tree,r1,branch)
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/main.R')
install.packages("nortest")
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/NSGA2/main.R')
is.null()
source('~/.active-rstudio-document')
c(0,5,4,7,6,8,5,0,7,10,9,11,4,7,0,7,6,8,7,10,7,0,6,8,6,9,6,5,0,9,8,11,8,9,8,0)
length(c(0,5,4,7,6,8,5,0,7,10,9,11,4,7,0,7,6,8,7,10,7,0,6,8,6,9,6,5,0,9,8,11,8,9,8,0))
source('~/.active-rstudio-document')
matrix
vector
source('~/.active-rstudio-document')
as.dist(matrix)
matrix
vector
as.matrix(vector)
as.matrix(vector,6,6)
as.matrix(vector,ncol=6,nrow=6)
matrix(vector,6,6)
source('~/.active-rstudio-document')
matrix
source('~/.active-rstudio-document')
plot(nk)
plot(nj)
plot(tree1)
edgelabels(tree1$edge.length)
matrix
source('~/.active-rstudio-document')
matrix
source('~/.active-rstudio-document')
matrix
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sum(tree1$edge.length)
sum(tree2$edge.length)
sum(tree2$edge.length)tree2=upgma(matrix)
tree2=upgma(matrix)
sum(tree2$edge.length)tree2=upgma(matrix)
sum(tree2$edge.length)
source('~/.active-rstudio-document')
0.65+0.75+1.25+1+4.4+2.5+2.5+1+2+2
source('~/.active-rstudio-document')
plot(tree1)
edgelabels(tree1$edge.length)
dist.topo(tree1,tree2)
treedist(tree1,tree2)
fastHeight
library("phytools")
fastHeight
source('~/.active-rstudio-document')
fastDist(1,1)
fastDist(tree1,1,1)
fastDist(tree1,1,2)
fastDist(tree1,1,3)
fastDist(tree1,1,4)
fastDist(tree1,1,5)
fastDist(tree1,1,6)
fastDist(tree1,2,3)
fastDist(tree1,2,4)
fastDist(tree1,2,5)
fastDist(tree1,2,6)
fastDist(tree1,3,3)
fastDist(tree1,3,34
)
fastDist(tree1,3,4)
fastDist(tree1,3,5)
fastDist(tree1,3,6)
fastDist(tree1,4,5)
fastDist(tree1,4,6)
fastDist(tree1,5,6)
fastDist(tree2,1,2)
fastDist(tree2,1,3)
fastDist(tree2,1,4)
fastDist(tree2,1,5)
fastDist(tree2,1,6)
fastDist(tree2,2,3)
fastDist(tree2,2,4)
fastDist(tree2,2,5)
fastDist(tree2,2,6)
fastDist(tree2,3,4)
fastDist(tree2,3,5)
fastDist(tree2,3,6)
fastDist(tree2,4,5)
fastDist(tree2,4,6)
fastDist(tree2,5,6)
10-7.5
6.7.5
6-7.5
9-7.5
6-7.5
11-8.8
8-8.8
9-8.8
8-8.8
1+0+1+1+4+1+4+1+4+0+1+4+1+0+1
2.5^2
1.5^2
0.8^2
2.2^2
0.2^4
0.2^2
0.8^2
0.2^2
2.2^2
0.8^2
2.2^2
0.8^2
0.2^2
0.8^2
1+1+0.5^2+2.5^2+0.5^2+1.5^2+1.5^2+1.5^2+0.8^2+2.2^2+0.8^2+0.2^2+0.8^2
1+1+0.5^2+2.5^2+0.5^2+1.5^2+1.5^2+1.5^2+0.8^2+2.2^2+0.8^2+0.2^2+0.8^2
source('~/.active-rstudio-document')
vector-vectora
(vector-vectora)^2
sum((vector-vectora)^2)
sum((vector-vectora)^2)/2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
vector-vectora
sum((vector-vectora)^2)
sum((vector-vectora)^2)/2
install.packages("shiny")
library("shiny")
runExample("01_hello")
log(1)
log(1/0.1)
-log(1/0.1)
-log2(1/0.1)
exp(-0.91)
log(1/4)
log(1/(1/4))
log(4)
a=exp(log(4}))
a=exp(log(4))
a
log(1/0.25)
1/10
exp(-0.91)
exp(-0.912)
exp(-0.91202022)
exp(-0.910000000)
exp(-0.91)
log(1/4)
1/4
1/1/4
log(0.25)
log(1/4)
log(1/0.25)
log(1/4)
exp(-0.91)
1/0.4025242
1/0.4
-2*log(1/4)
-2*log(1/0.25)
-log2(1/0.25)
-log(1/0.25,2)
-log(1/4,2)
-log(1/2,2)
-log(1/0.25,2)
log(0.1/0.25)
-log(0.1/0.25)
-log(0.1/0.25)
log(0.1/0.25)
version
modeltest
library("shiny")
runExample("01_hello")
runExample("01_hello")
(3^4-1)/2
(3^5-1)/2
(3^4-1)/2
(3^3-1)/2
(3^2-1)/2
(3^3-1)/2
100^13
100/13
8*13
8*13
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/MEM_AGENTS/main.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Bioinformática/Tesis/MEM_AGENTS/main.R')
shiny::runApp('C:/Users/Manuel/Desktop/Pruebas')
shiny::runApp('C:/Users/Manuel/Desktop/Pruebas')
shiny::runApp('C:/Users/Manuel/Desktop/Pruebas')
runExample("01_hello")
library(devtools)
install_github("liamrevell/phytools")
library("phytools")
install.packages("phytools")
library("ape")
data(woodmouse)
woormouse
woodmouse
tr <- nj(dist.dna(woodmouse))
plot(tr)
print(boot.phylo(tr, woodmouse, function(xx) nj(dist.dna(xx))))
print(boot.phylo(tr)
)
print(boot.phylo(tr, woodmouse, function(xx) nj(dist.dna(xx))))
dist.dna(woodmau)
dist.dna(woodmouse)
print(boot.phylo(tr,dist.dna(woodmouse))
)
print(boot.phylo(tr,as.matrix(dist.dna(woodmouse))
)
)
print(boot.phylo(tr, woodmouse, function(xx) nj(dist.dna(xx))))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
nj(dist.dna(woodmouse))
arbol=nj(dist.dna(woodmouse))
source('~/.active-rstudio-document')
a
source('~/.active-rstudio-document')
a
source('~/.active-rstudio-document')
a
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
version
tree1=wpgma(dist.dna(as.DNAbin(data),model="F81"))
NJtrees <- bootstrap.phyDat(data, FUN=function(x) FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81")), nni = TRUE), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=wpgma(dist.dna(as.DNAbin(data),model="F81"))
wpgma
library("phangorn")
tree1=wpgma(dist.dna(as.DNAbin(data),model="F81"))
tree1=wpgma(dist.dna(as.DNAbin(data),model="F81"))
tree1=wpgma(dist.dna(data,model="F81"))
source('C:/Users/Manuel/Desktop/Proyecto 2/main.R')
source('C:/Users/Manuel/Desktop/Proyecto 2/main.R')
tree1=wpgma(dist.dna(as.DNAbin(data),model="F81"))
tree1=wpgma(dist.dna(as.DNAbin(data),model="F81"))
NJtrees <- bootstrap.phyDat(data, FUN=function(x) FUN=function(x) wpgma(dist.dna(as.DNAbin(data),model="F81")), nni = TRUE), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
NJtrees <- bootstrap.phyDat(data, FUN=function(x) FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81")), nni = TRUE), bs=100)
NJtrees = bootstrap.phyDat(data, FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81"), nni = TRUE), bs=100)
NJtrees = bootstrap.phyDat(data, FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81"), nni = TRUE, bs=100)
)
NJtrees = bootstrap.phyDat(data, FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81"), nni =E, bs=100)
)
NJtrees = bootstrap.phyDat(data, FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81")), nni = TRUE, bs=100)
NJtrees = bootstrap.phyDat(data, FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81")), nni = TRUE, bs=100)
NJtrees = bootstrap.phyDat(data, FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81")), bs=100)
NJtrees = bootstrap.phyDat(data, FUN=function(x) wpgma(dist.dna(as.DNAbin(x),model="F81")), bs=100)sa
NJtrees = bootstrap.phyDat(data,FUN=function(x)wpgma(dist.dna(as.DNAbin(x),model="F81")), bs=100)
NJtrees = bootstrap.phyDat(data,FUN=function(x)NJ(dist.logDet(x)), bs=100)
tree1=wpgma(dist.dna(as.DNAbin(data),model="F81"))
NJtrees = bootstrap.phyDat(data,FUN=function(x)wpgma(dist.dna(as.DNAbin(x),model="F81")), bs=100)
wpgma(dist.dna(as.DNAbin(x),model="F81"))
wpgma(dist.dna(as.DNAbin(data),model="F81"))
NJtrees = bootstrap.phyDat(data, FUN=function(x)wpgma(dist.hamming(a)), bs=100)
NJtrees = bootstrap.phyDat(data, FUN=function(x)wpgma(dist.hamming(x)), bs=100)
tree1=wpgma(dist.hamming(data))
NJtrees = bootstrap.phyDat(data, FUN=function(x)wpgma(dist.hamming(x)), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)optim.parsimony(tree1,x), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)optim.parsimony(tree1,x), bs=100,quiet=FALSE)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)optim.parsimony(tree1,x), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)wpgma(dist.hamming(x)), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)NJ(tree1,x), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)optim.parsimony(tree1,x), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)optim.parsimony(tree1,x), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
add.scale.bar()
treeNJ
treeNJ[[]]
treeNJ[1
]
treeNJ[2]
treeNJ[3]
treeNJ[4]
treeNJ$node.label
plotBS(tree1, NJtrees, "phylogram",BStrees=FALSE)
plotBS(tree1, NJtrees, "phylogram",tree = =FALSE)
plotBS(tree1, NJtrees, "phylogram",tree=FALSE)
plotBS(tree1, NJtrees, "phylogram",trees=FALSE)
plotBS
caca=plotBS(tree1, NJtrees, "phylogram",trees=FALSE)
caca$node.label
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)optim.parsimony(tree1,x), bs=100,t)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
add.scale.bar()
tree1=optim.parsimony(tree1, data)
NJtrees = bootstrap.phyDat(data, FUN=function(x)optim.parsimony(tree1,x), bs=100)
treeNJ <- plotBS(tree1, NJtrees, "phylogram")
add.scale.bar()
mT <- modelTest(tree1,data)
cat("- Including initial likelihood optimisation...\n")
env <- attr(mT, "env")
ev_tree <- eval(get(mT$Model[which.min(mT$AIC)], env), env)
mT <- modelTest(tree1,data)
cat("- Including initial likelihood optimisation...\n")
mT = NULL
mT = modelTest(tree1,data)
env <- attr(mT, "env")
ev_tree <- eval(get(mT$Model[which.min(mT$AIC)], env), env)
mT = NULL
mT = modelTest(tree1,data)
data
tree1
tree1=acctran(tree1,data)
mT = NULL
mT = modelTest(tree1,data)
env <- attr(mT, "env")
ev_tree <- eval(get(mT$Model[which.min(mT$AIC)], env), env)
mT = modelTest(tree1,data)
data
mT = modelTest(data,tree1)
mT = NULL
mT = modelTest(data,tree1)
env <- attr(mT, "env")
ev_tree <- eval(get(mT$Model[which.min(mT$AIC)], env), env)
#Evolutionary model selection
if ((mT$Model[which.min(mT$AIC)]=="GTR") | (mT$Model[which.min(mT$AIC)]=="GTR+I") | (mT$Model[which.min(mT$AIC)]=="GTR+G")| (mT$Model[which.min(mT$AIC)]=="GTR+G+I")) {ev_tree$model="GTR"}
if ((mT$Model[which.min(mT$AIC)]=="HKY") | (mT$Model[which.min(mT$AIC)]=="HKY+I") | (mT$Model[which.min(mT$AIC)]=="HKY+G")| (mT$Model[which.min(mT$AIC)]=="HKY+G+I")) {ev_tree$model="HKY"}
if ((mT$Model[which.min(mT$AIC)]=="JC") | (mT$Model[which.min(mT$AIC)]=="JC+I") | (mT$Model[which.min(mT$AIC)]=="JC+G")| (mT$Model[which.min(mT$AIC)]=="JC+G+I")) {ev_tree$model="JC"}            #Acá poner los otros hacia abajo
tree1=pml(tree = ev_tree$tree, data = data, bf = ev_tree$bf, Q = ev_tree$Q, inv = ev_tree$inv,k = ev_tree$k, shape = ev_tree$shape)
tree1=pml(tree = ev_tree$tree, data = data, bf = ev_tree$bf, Q = ev_tree$Q, inv = ev_tree$inv,k = ev_tree$k, shape = ev_tree$shape)
plot(tree1)
bs <- bootstrap.pml(tree1, bs=100, optNni=TRUE)
treeBS <- plotBS(tree1$tree,bs)
#Análisis de calidada Bootstrap para likelihood
bs <- bootstrap.pml(tree1, bs=100, optNni=TRUE)
treeBS <- plotBS(tree1$tree,bs,"phylogram")
